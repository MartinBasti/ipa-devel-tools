#!/usr/bin/python3
# Author: Martin Basti
# See LICENSE file for license


import argparse
import os
import sys
import logging
import traceback

from ipavagrant import constants
from ipavagrant.ipaci import IPACITopology


def main():
    parser = argparse.ArgumentParser(description="")
    parser.add_argument("topology_name", type=str,
                        help="Name for topology (directory with this name "
                             "will be created)",
                        nargs="?")
    parser.add_argument("--replicas", dest="replicas", type=int, default=0,
                        metavar="INT",
                        help="Number of IPA replicas to be prepared "
                             "(default: 0)")
    parser.add_argument('--clients', dest="clients", type=int, default=0,
                        metavar="INT",
                        help="Number of IPA clients to be prepared "
                             "(default: 0)")
    parser.add_argument('--domain', dest="domain", type=str,
                        default=None, help="Domain for provisioned VM")
    parser.add_argument('--add-package', dest="packages", action="append",
                        help="Allows to specify packages that will be "
                             "installed from repository", default=[],
                        metavar="NAME")
    parser.add_argument('--add-copr', dest="copr_repos", action="append",
                        help="Allows to specify copr repositories that will "
                             "be enabled", default=[],
                        metavar="NAME")
    parser.add_argument('--memory-controller', dest="memory_controller",
                        help="Allows to specify memory for controller [MB]",
                        metavar="MBytes", default=None)
    parser.add_argument('--memory-server', dest="memory_server",
                        help="Allows to specify memory for server [MB]",
                        metavar="MBytes", default=None)
    parser.add_argument('--memory-client', dest="memory_client",
                        help="Allows to specify memory for client [MB]",
                        metavar="MBytes", default=None)

    # selinux
    parser.add_argument('--selinux-enforce', dest="selinux_enforcing",
                        action='store_true',
                        help="Set SELinux to enforce mode")
    parser.add_argument('--no-selinux-enforce', dest="selinux_enforcing",
                        action='store_false',
                        help="Set SELinux to permissive mode")
    parser.set_defaults(selinux_enforcing=None)

    parser.add_argument('--box', dest="box", default=None,
                        help="Set box that will be used")
    parser.add_argument('--config-file', dest="config_file", default=None,
                        help="Path to configuration file (default: %s)" %
                        constants.DEFAULT_CONFIG_FILENAME)
    parser.add_argument('--export-config', dest="export_config", default=False,
                        action="store_true", help="export current "
                        "configuration to config file (destination: "
                        "--config-file)")
    parser.add_argument('--show-config', dest="show_config", default=False,
                        action="store_true", help="show current configuration")
    parser.add_argument("--debug", action="store_true", default=False,
                        dest='debug',
                        help="Enables DEBUG level logging")

    args = parser.parse_args()

    if args.debug:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)
    if not args.topology_name:
        if args.show_config or args.export_config:
            topology_path = "_unused_"
        else:
            raise RuntimeError("Topology name is required")
    else:
        topology_path = os.path.abspath(args.topology_name)

    ci_topo = IPACITopology(
        topology_path,
        config_file=args.config_file,
        config_options=dict(
            domain=args.domain,
            memory_controller=args.memory_controller,
            memory_server=args.memory_server,
            memory_client=args.memory_client,
            selinux_enforcing=args.selinux_enforcing,
            box=args.box
        ),
        replicas=args.replicas,
        clients=args.clients,
        packages=args.packages,
        copr_repos=args.copr_repos
    )

    if args.show_config:
        print("Current configuration:")
        keys = sorted(ci_topo.config.config.keys())
        for key in keys:
            print("    %s: %r" % (key, ci_topo.config.config[key]))
        print("Path to used config file: ", ci_topo.config.get_filename())
        if not args.export_config:
            return

    if args.export_config:
        where = ci_topo.config.export_config()
        print("Configuration saved to %s" % where, file=sys.stderr)
        return

    ci_topo.create()


if __name__ == '__main__':
    try:
        main()
    except RuntimeError as e:
        logging.debug(traceback.format_exc())
        print(e, file=sys.stderr)
        sys.exit(2)

