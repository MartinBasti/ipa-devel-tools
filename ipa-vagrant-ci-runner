#!/usr/bin/python3
# Author: Martin Basti
# See LICENSE file for license

import argparse
import logging
import sys
import traceback

from ipavagrant.config import IPAVagrantConfig
from ipavagrant.ipaci import IPACIRunner
from ipavagrant import constants


def main():
    parser = argparse.ArgumentParser(description="")
    parser.add_argument("test_name", type=str,
                        help="Name of CI test(s) to be executed",
                        nargs='*')
    parser.add_argument("--init", action="store_true", default=False,
                        dest="initialize",
                        help="Initialize IPA CI runner in current directory")
    test_config = parser.add_argument_group("Test configuration options")
    test_config.add_argument(
        '--add-package', dest="packages", action="append",
        help="Allows to specify packages that will be installed from "
             "repository",
        default=[], metavar="NAME")
    test_config.add_argument(
        '--add-copr', dest="copr_repos", action="append",
        help="Allows to specify copr repositories that will be enabled",
        default=[], metavar="NAME")
    test_config.add_argument(
        '--memory-controller', dest="memory_controller",
        help="Allows to specify memory for controller [MB]",
        metavar="MBytes", default=None)
    test_config.add_argument(
        '--memory-server', dest="memory_server",
        help="Allows to specify memory for server [MB]",
        metavar="MBytes", default=None)
    test_config.add_argument(
        '--memory-client', dest="memory_client",
        help="Allows to specify memory for client [MB]",
        metavar="MBytes", default=None)

    # selinux
    test_config.add_argument(
        '--selinux-enforce', dest="selinux_enforcing",
        action='store_true',
        help="Set SELinux to enforce mode")
    test_config.add_argument(
        '--no-selinux-enforce', dest="selinux_enforcing",
        action='store_false',
        help="Set SELinux to permissive mode")
    test_config.set_defaults(selinux_enforcing=None)

    test_config.add_argument(
        '--box', dest="box", default=None,
        help="Set box that will be used")
    test_config.add_argument(
        '--domain', dest="domain", type=str,
        default=None, help="Domain for provisioned VM")

    file_config = parser.add_argument_group("Configuration file options")
    file_config.add_argument(
        '--config-file', dest="config_file", default=None,
        help="Path to configuration file (default: %s)" %
        constants.DEFAULT_CONFIG_FILENAME)
    file_config.add_argument(
        "--config-topo-file", dest="config_topo_file",
        default=None,
        help="Path for configuration file contains tests and topologies "
             "configuration. (default: {})".format(
                 constants.DEFAULT_TOPO_CONFIG_FILENAME))
    file_config.add_argument(
        '--export-topo-config', dest="export_topo_config",
        default=False, action="store_true",
        help="export current configuration to config file (destination: "
             "--config-topo-file)")
    file_config.add_argument(
        '--list-tests', dest="list_tests", default=False,
        action="store_true", help="list available/configured tests")

    parser.add_argument("--debug", action="store_true", default=False,
                        dest="debug",
                        help="Enables DEBUG level logging")

    args = parser.parse_args()

    if args.debug:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)

    config = IPAVagrantConfig(
        filename=args.config_file,
        # options
        domain=args.domain,
        memory_controller=args.memory_controller,
        memory_server=args.memory_server,
        memory_client=args.memory_client,
        selinux_enforcing=args.selinux_enforcing,
        box=args.box,
        packages=args.packages,
        copr_repos=args.copr_repos
    )

    runner = IPACIRunner(
        args.test_name,
        config_topo_file=args.config_topo_file,
        config=config
    )

    if args.initialize:
        if runner.is_initialized():
            raise RuntimeError("Already initialized")
        else:
            runner.initialize()
            print("Initialization done", file=sys.stderr)
            sys.exit(0)

    if args.export_topo_config:
        where = runner.topo_config.export_config()
        print("Configuration saved to", where, file=sys.stderr)
        return

    if args.list_tests:
        print("\n".join(sorted(runner.topo_config.tests.keys())))
        return

    if not runner.is_initialized():
        raise RuntimeError("IPA CI runner must be initialized first in "
                           "current directory. Please use option '--init'")

    if not args.test_name:
        RuntimeError("No tests have been specified")

    runner.run()

if __name__ == "__main__":
    try:
        main()
    except RuntimeError as e:
        logging.debug(traceback.format_exc())
        print(e, file=sys.stderr)
        sys.exit(2)
